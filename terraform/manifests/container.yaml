pack:
  namespace: "{{.spectro.system.appdeployment.tiername}}-ns"
  releaseNameOverride: "{{.spectro.system.appdeployment.tiername}}"
postReadinessHooks:
  outputParameters:
  - name: CONTAINER_NAMESPACE
    type: lookupSecret
    spec:
      namespace: "{{.spectro.system.appdeployment.tiername}}-ns"
      secretName: "{{.spectro.system.appdeployment.tiername}}-custom-secret"
      ownerReference:
        apiVersion: v1
        kind: Service
        name: "{{.spectro.system.appdeployment.tiername}}-svc"
      keyToCheck: metadata.namespace
  - name: CONTAINER_SVC
    type: lookupSecret
    spec:
      namespace: "{{.spectro.system.appdeployment.tiername}}-ns"
      secretName: "{{.spectro.system.appdeployment.tiername}}-custom-secret"
      ownerReference:
        apiVersion: v1
        kind: Service
        name: "{{.spectro.system.appdeployment.tiername}}-svc"
      keyToCheck: metadata.annotations["spectrocloud.com/service-fqdn"]
  - name: CONTAINER_SVC_EXTERNALHOSTNAME
    type: lookupSecret
    spec:
      namespace: "{{.spectro.system.appdeployment.tiername}}-ns"
      secretName: "{{.spectro.system.appdeployment.tiername}}-custom-secret"
      ownerReference:
        apiVersion: v1
        kind: Service
        name: "{{.spectro.system.appdeployment.tiername}}-svc"
      keyToCheck: status.loadBalancer.ingress[0].hostname
      conditional: true
  - name: CONTAINER_SVC_EXTERNALIP
    type: lookupSecret
    spec:
      namespace: "{{.spectro.system.appdeployment.tiername}}-ns"
      secretName: "{{.spectro.system.appdeployment.tiername}}-custom-secret"
      ownerReference:
        apiVersion: v1
        kind: Service
        name: "{{.spectro.system.appdeployment.tiername}}-svc"
      keyToCheck: status.loadBalancer.ingress[0].ip
      conditional: true
  - name: CONTAINER_SVC_PORT
    type: lookupSecret
    spec:
      namespace: "{{.spectro.system.appdeployment.tiername}}-ns"
      secretName: "{{.spectro.system.appdeployment.tiername}}-custom-secret"
      ownerReference:
        apiVersion: v1
        kind: Service
        name: "{{.spectro.system.appdeployment.tiername}}-svc"
      keyToCheck: spec.ports[0].port
containerService:
  serviceName: "{{.spectro.system.appdeployment.tiername}}-svc"
  registryUrl: ""
  image: ${image}
  access: public
  ports:
    - "3000"
  serviceType: LoadBalancer
  env:
    - name: REDIS_URL
      value: "{{.spectro.app.$appDeploymentName.redis.REDISMSTR_SVC}}"
    - name: REDIS_USER
      value: "{{.spectro.app.$appDeploymentName.redis.USERNAME}}"
    - name: REDIS_PASSWORD
      value: "{{.spectro.app.$appDeploymentName.redis.PASSWORD}}"
    - name: REDIS_PORT
      value: "{{.spectro.app.$appDeploymentName.redis.REDISMSTR_SVC_PORT}}"
    - name: MENDABLE_API_KEY
      value: ${mendable_api_key}
    - name: SLACK_SIGNING_SECRET
      value: ${slack_signing_secret}
    - name: TRACE
      value: ${trace_level}